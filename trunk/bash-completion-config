#!/bin/bash
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $
#
# Author: Aaron Walker <ka0ttic@gentoo.org>

[ -z "${ROOT}" ] && ROOT="/"
if ! source $ROOT/sbin/functions.sh ; then
    echo "Failed to source /sbin/functions.sh"
    exit 1
fi

if [ -z "${HOME}" ] ; then 
    eerror "HOME environment variable is not set!"
    exit 1
fi

###############################################################################
# variables 
###############################################################################

PACKAGE="${0##*/}"
VERSION="0.1"

# TODO: add command-line switches to specify alt. dirs
BASHCOMP_DIR="$ROOT/usr/share/bash-completion"
INSTALL_DIR="$ROOT/$HOME/.bash_completion.d"
GLOBAL_INSTALL_DIR="$ROOT/etc/bash_completion.d"

###############################################################################
# helper functions
###############################################################################

usage()
{
cat << END
Usage: $PACKAGE [options] <name1> <name2>
Add/remove bash-completion function(s) to your environment

Options:
  -g, --global      Install bash-completion system-wide (must be root)
  -l, --list        List currently enabled bash-completions
  -i, --install     Install bash-completion
  -u, --uninstall   Uninstall bash-completion
END
}

# bleh arg missing
blarg()
{
    echo -e "$1 requires at least one argument!\n"
    usage
    exit 1
}

# check file existence
check_file()
{
    if [ ! -e "$1" ] ; then
        eerror "${1##*/} doesn't seem to exist."
        return 1
    fi
}

###############################################################################
# action functions
###############################################################################

# TODO
list()
{
    echo "$FUNCNAME - TODO"
}

install()
{
    local bashcomp file
    [ -z "$1" ] && blarg $FUNCNAME

    if [ ! -d "$INSTALL_DIR" ] ; then
        mkdir "$INSTALL_DIR" || return 1
    fi
    
    for bashcomp in "$@" ; do
        file="$BASHCOMP_DIR/$bashcomp"
        check_file "$file" || return 1

        # already installed
        if [ -n "${GLOBAL}" -a -e "${GLOBAL_INSTALL_DIR}/${bashcomp}" ] ||
           [ -z "${GLOBAL}" -a -e "${INSTALL_DIR}/${bashcomp}" ]
        then
            ewarn "$bashcomp is already installed"
            continue
        fi

        ebegin "Installing $bashcomp"
        if [ -z "${GLOBAL}" ] ; then
            ln -s "$file" "$INSTALL_DIR"
        else
            ln -s "$file" "$GLOBAL_INSTALL_DIR"
        fi
        eend $?
    done

    echo
    echo "If you haven't already, add the following to your ~/.bashrc:"
    echo "[ -d ~/.bash_completion.d ] && source ~/.bash_completion.d/*"
    echo "You must then source your ~/.bashrc for the changes to take effect."
}

uninstall()
{
    local bashcomp file
    [ -z "$1" ] && blarg $FUNCNAME

    for bashcomp in "$@" ; do
        file="$INSTALL_DIR/$bashcomp"
        
        if [ -n "${GLOBAL}" -a ! -e "${GLOBAL_INSTALL_DIR}/${bashcomp}" ] ||
           [ -z "${GLOBAL}" -a ! -e "${file}" ]
        then
            ewarn "$bashcomp is not installed"
            continue
        fi
        
        ebegin "Uninstalling $bashcomp"
        if [ -z "${GLOBAL}" ] ; then
            rm "$file"
        else
            rm "$GLOBAL_INSTALL_DIR/$bashcomp"
        fi
        eend $?
    done
}

###############################################################################
# main program
###############################################################################

if [ "$#" -eq 0 ] ; then
    usage
    exit 1
fi

set -- "$@"
while true ; do
    case "$1" in
	-l|--list)
            list
            exit $?
            ;;
	-i|--install)
            shift
            install "$@"
            exit $?
	    ;;
	-u|--uninstall)
            shift
            uninstall "$@"
            exit $?
	    ;;
        -g|--global)
            GLOBAL=yes
            shift
            ;;
	-h|--help)
	    usage
	    exit 0
	    ;;
	-v|--version)
	    echo "$PACKAGE-$VERSION"
	    exit 0
	    ;;
	*)
	    echo "Invalid option specified."
	    echo "Use --help for more information."
	    exit 1
	    ;;
    esac
done

# vim: set tw=80 sw=4 et :
