#!@BASH@
# Copyright 1999-2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Id$
#
# Author: Aaron Walker <ka0ttic@gentoo.org>

[ -z "${ROOT}" ] && ROOT="/"
if ! source $ROOT/sbin/functions.sh ; then
    echo "Failed to source /sbin/functions.sh"
    exit 1
fi

if [ -z "${HOME}" ] ; then 
    eerror "HOME environment variable is not set!"
    exit 1
fi

###############################################################################
# variables 
###############################################################################

PACKAGE="@PACKAGE@"
VERSION="@VERSION@"

# TODO: add command-line switches to specify alt. dirs
BASHCOMP_DIR="$ROOT@DATADIR@/bash-completion"
INSTALL_DIR="$ROOT/$HOME/.bash_completion.d"
GLOBAL_INSTALL_DIR="$ROOT@SYSCONFDIR@/bash_completion.d"

COLOR_ONE="\033[01;34m" # blue
COLOR_TWO="\033[01;32m" # green
NO_COLOR="\033[00m"

###############################################################################
# misc functions
###############################################################################

usage()
{
cat << END
Usage: $PACKAGE [options] <name1> <name2>
Add/remove bash-completion function(s) to your environment

Options:
  -g, --global      Perform operation system-wide (must be root).
                    Must be used in conjunction with --install or
                    --uninstall.
  -h, --help        Display this help message.
  -v, --version     Display version information.
  -l, --list        Lists currently enabled bash-completions (local
                    and global).
  -i, --install     Install specified bash-completion(s).
  -u, --uninstall   Uninstall specified bash-completion(s).
END
}

# bleh arg missing
blarg()
{
    echo -e "$1 requires at least one argument!\n"
    usage
    exit 1
}

# check file existence
check_file()
{
    if [ ! -e "$1" ] ; then
        eerror "${1##*/} doesn't seem to exist."
        return 1
    fi
}

# get max filename length in dir $1
maxfnlen()
{
    local len=0 bashcomp
    for bashcomp in $1/* ; do
        bashcomp="${bashcomp##*/}"
        [[ ${#bashcomp} -gt $len ]] && len=${#bashcomp}
    done
    echo $len
}

###############################################################################
# action functions
###############################################################################

list()
{
    local n 
    local maxlen=$(($(maxfnlen $BASHCOMP_DIR) + 1 ))

    printf "%-${maxlen}s| Local  Global |\n"
    for ((n = 1 ; n <= (maxlen + 17) ; n++)) ; do
        echo -n -
    done
    echo
    
    for bashcomp in $BASHCOMP_DIR/* ; do
        bashcomp="${bashcomp##*/}"
        local i=3
        local loc="${INSTALL_DIR}/${bashcomp}"
        local glob="${GLOBAL_INSTALL_DIR}/${bashcomp}"
        local len="${#bashcomp}"
        
        [[ ! -e "${loc}" && ! -e "${glob}" ]] && continue
        
        echo -ne "${COLOR_ONE}${bashcomp}${NO_COLOR}"        
        for ((n = 1 ; n <= (maxlen - len) ; n++)) ; do echo -n ' ' ; done
        echo -n '|'

        [[ ! -e "${loc}" && -e "${glob}" ]] && i=10
        for ((n = 1 ; n <= i ; n++)) ; do echo -n ' ' ; done
        
        [ -e "${loc}" ] && echo -ne "${COLOR_TWO}*${NO_COLOR}"
        [ -e "${glob}" ] && echo -ne "${COLOR_TWO}*${NO_COLOR}"
        echo
    done
}

install()
{
    local bashcomp file
    [ -z "$1" ] && blarg $FUNCNAME

    if [ ! -d "${INSTALL_DIR}" ] ; then
        mkdir "${INSTALL_DIR}" || return 1
    fi

    if [ -n "${GLOBAL}" -a ! -d "${GLOBAL_INSTALL_DIR}" ] ; then
        mkdir "${GLOBAL_INSTALL_DIR}" || return 1
    fi
    
    for bashcomp in "$@" ; do
        # full path given
        if [[ "${bashcomp}" == */* ]] ; then
            file=$bashcomp
        else # if not, use default location
            file="$BASHCOMP_DIR/$bashcomp"
        fi
        
        check_file "$file" || return 1

        # already installed
        if [ -n "${GLOBAL}" -a -e "${GLOBAL_INSTALL_DIR}/${bashcomp}" ] ||
           [ -z "${GLOBAL}" -a -e "${INSTALL_DIR}/${bashcomp}" ]
        then
            ewarn "${bashcomp##*/} is already installed"
            continue
        fi

        local rv=0
        ebegin "Installing ${bashcomp##*/}"
        if [ -z "${GLOBAL}" ] ; then
            ln -s "$file" "$INSTALL_DIR" || rv=1
        else
            if [ -w "${GLOBAL_INSTALL_DIR}" ] ; then
                ln -s "$file" "$GLOBAL_INSTALL_DIR" || rv=1
            else
                eerror "You don't have the correct permissions to use --global"
                rv=1
            fi
        fi
        eend $rv
    done

    if [ -z "${GLOBAL}" ] ; then
        echo
        echo "If you haven't already, add the following to your ~/.bashrc:"
        echo '[ -d ~/.bash_completion.d ] && \'
        echo '{ for i in ~/.bash_completion.d/*; do [ -f $i ] && . $i; done }'
        echo "You must then source your ~/.bashrc for the changes to take effect."
    fi
}

uninstall()
{
    local bashcomp file
    [ -z "$1" ] && blarg $FUNCNAME

    for bashcomp in "$@" ; do
        file="$INSTALL_DIR/$bashcomp"
        [ -n "${GLOBAL}" ] && file="$GLOBAL_INSTALL_DIR/$bashcomp"
        
        if [ ! -e "${file}" ] ; then
            ewarn "$bashcomp is not installed"
            continue
        fi
        
        ebegin "Uninstalling $bashcomp"
        rm "$file"
        eend $?
    done
}

###############################################################################
# main program
###############################################################################

if [ "$#" -eq 0 ] ; then
    usage
    exit 1
fi

set -- "$@"
while true ; do
    case "$1" in
	-l|--list)
            list
            exit $?
            ;;
	-i|--install)
            shift
            install "$@"
            exit $?
	    ;;
	-u|--uninstall)
            shift
            uninstall "$@"
            exit $?
	    ;;
        -g|--global)
            GLOBAL=yes
            shift
            ;;
	-h|--help)
	    usage
	    exit 0
	    ;;
	-v|--version)
	    echo "$PACKAGE-$VERSION"
	    exit 0
	    ;;
	*)
	    echo "Invalid option specified."
	    echo "Use --help for more information."
	    exit 1
	    ;;
    esac
done

# vim: set ft=sh tw=80 sw=4 et :
